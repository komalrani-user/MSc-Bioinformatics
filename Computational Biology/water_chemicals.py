# -*- coding: utf-8 -*-
"""water_chemicals.ipynb

Automatically generated by Colab.

"""

import pandas as pd
import matplotlib.pyplot as plt

water_chemicals_data = pd.read_csv('water_chemicals.tsv', sep='\t')
water_chemicals_data

water_chemicals_data.columns

# Extracting the columns 'D01' through 'D12'
values = water_chemicals_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']]

# Check which chemicals have 0 values for all columns
chemicals_with_all_zeros = water_chemicals_data[(values == 0).all(axis=1)]['ChemName']
print("Chemicals with 0 values for all columns:")
print(chemicals_with_all_zeros)

# Remove the chemicals with all zero values from the DataFrame
filtered_data = water_chemicals_data[~water_chemicals_data['ChemName'].isin(chemicals_with_all_zeros)]

import matplotlib.pyplot as plt

# Extracting the chemical names and the values for columns 'D01' through 'D12'
chemical_names = filtered_data['ChemName']
values = filtered_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']]

# Plotting
plt.figure(figsize=(10, 6))
for column in values.columns:
    plt.plot(chemical_names, values[column], label=column)

plt.title('Chemical Values at Different Sites')
plt.xlabel('Chemical Names')
plt.ylabel('Values')
plt.xticks(rotation=90)
plt.legend(loc='center', bbox_to_anchor=(1.2, 1), ncol=1)
plt.tight_layout()
plt.show()

# Extracting the chemical names and the values for columns 'D01' through 'D12'
chemical_names = filtered_data['ChemName']
values = filtered_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']]

# Plotting each chemical separately
for i, chem_name in enumerate(chemical_names):
    plt.figure(figsize=(10, 6))  # Adjust figure size as needed

    plt.bar(range(len(values.columns)), values.iloc[i])
    plt.title(f'Values for Chemical: {chem_name}')
    plt.xlabel('Period')
    plt.ylabel('Values')
    plt.xticks(range(len(values.columns)), values.columns)
    plt.tight_layout()
    plt.show()

# Extracting the columns 'D01' through 'D12'
values = water_chemicals_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']]

# Summing the values down the columns to get the total for each 'D01', 'D02', etc.
column_totals = values.sum()

# Display the column totals
print("Total for each column:")
print(column_totals)

total_chemicals = pd.read_csv('/content/total_water_chem.csv', sep=',')

total_chemicals

# Select the chemical you want to plot
totals = 'Total'

# Extract the values for the selected chemical
total_values = total_chemicals.loc[total_chemicals['ChemName'] == totals, 'D01':'D12'].values.flatten()

# Plotting
plt.figure(figsize=(10, 6))  # Adjust figure size as needed

# Create a bar plot
plt.bar(range(1, 13), total_values, align='center')

plt.title(f'Sum Chemical Quantification at each Site')
plt.xlabel('Site of collection')
plt.ylabel('Semi-quantification Values')
plt.xticks(range(1, 13), ['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12'])
plt.grid(True)
plt.tight_layout()
plt.show()

import plotly.express as px
fig = px.bar(total_values)
fig.show()

# Filter out rows where the values in 'D01', 'D02', etc. are 0
clean_data = filtered_data[(filtered_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']] != 0).all(axis=1)]

clean_data

# Extracting the chemical names and the values for columns 'D01' through 'D12'
chemical_names = filtered_data['ChemName']
values = filtered_data[['D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07', 'D08', 'D09', 'D10', 'D11', 'D12']]

# Plotting each chemical separately
for i, chem_name in enumerate(chemical_names):
    plt.figure(figsize=(10, 6))  # Adjust figure size as needed

    plt.bar(range(len(values.columns)), values.iloc[i])
    plt.title(f'Values for Chemical: {chem_name}')
    plt.xlabel('Period')
    plt.ylabel('Values')
    plt.xticks(range(len(values.columns)), values.columns)
    plt.tight_layout()
    plt.show()
